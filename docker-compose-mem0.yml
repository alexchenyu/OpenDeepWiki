services:
  koalawiki:
    # image: crpi-j9ha7sxwhatgtvj4.cn-shenzhen.personal.cr.aliyuncs.com/koala-ai/koala-wiki
    build:
      context: .
      dockerfile: src/KoalaWiki/Dockerfile
    deploy:
      resources:
        limits:
          memory: 80G  # 超大仓库需要更多内存处理依赖分析（服务器有251GB内存）
        reservations:
          memory: 16G  # 预留最小内存
    networks:
      - koala_network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - TZ=America/Los_Angeles
      - KOALAWIKI_REPOSITORIES=/repositories
      - TASK_MAX_SIZE_PER_USER=5 # 每个用户AI处理文档生成的最大数量
      - REPAIR_MERMAID=1 # 是否进行Mermaid修复，1修复，其余不修复
      - CHAT_MODEL=grok-4-fast-non-reasoning # 必须要支持function的模型
      - ANALYSIS_MODEL=grok-4-fast-non-reasoning # 分析模型，用于生成仓库目录结构，这个很重要，模型越强，生成的目录结构越好，为空则使用ChatModel
      # 分析模型建议使用GPT-4.1  , CHAT模型可以用其他模型生成文档,以节省 token 开销
      - CHAT_API_KEY=sk-a6IwJQ3_dJCANSipFXBcnw #您的APIkey
      - LANGUAGE= # 设置生成语言默认为"中文", 英文可以填写 English 或 英文
      - ENDPOINT=http://us-agent.supermicro.com:4500/v1
      - DB_TYPE=postgres
      - DB_CONNECTION_STRING=Host=postgres;Port=5432;Database=KoalaWiki;Username=postgres;Password=postgres;Timeout=300;Command Timeout=300;Maximum Pool Size=200;Minimum Pool Size=20;Connection Idle Lifetime=600;Keepalive=60
      - UPDATE_INTERVAL=5 # 仓库增量更新间隔，单位天
      - EnableSmartFilter=true # 是否启用智能过滤，这可能影响AI得到仓库的文件目录
      - ENABLE_INCREMENTAL_UPDATE=true # 是否启用增量更新
      - ENABLE_CODED_DEPENDENCY_ANALYSIS=true # 是否启用代码依赖分析？这可能会对代码的质量产生影响。
      - ENABLE_WAREHOUSE_FUNCTION_PROMPT_TASK=true # 是否启用MCP Prompt生成
      - ENABLE_WAREHOUSE_DESCRIPTION_TASK=true # 是否启用仓库Description生成
      - ENABLE_MEM0=true # 是否启用Mem0 RAG用于增强对话检索能力
      - MEM0_API_KEY=koala-ai # Mem0 API Key
      - MEM0_ENDPOINT=http://mem0:8000 # Mem0 API Endpoint
      - OTEL_SERVICE_NAME=koalawiki
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://aspire-dashboard:18889
      - ENABLE_CODE_COMPRESSION=true # 启用代码压缩以减少token使用
      - CATALOGUE_FORMAT=compact # 使用紧凑的目录格式
      - READ_MAX_TOKENS=1000000  # GLM-4.6-FP8模型最大202752 tokens，设置为70%
      - CATALOGUE_MAX_TOKENS=500000  # 目录结构最大token限制（超大仓库如openbmc需要严格限制）
      - CHARS_PER_TOKEN=2.5  # 字符到token的转换比例（代码通常2.5-3.5）
      - MAX_FILE_READ_COUNT=3  # 最多3个文件
    ports:
      - "8080:8080"
    volumes:
      - ./repositories:/app/repositories
      - ./data:/data

  mem0:
    container_name: mem0
    # image: registry.cn-shenzhen.aliyuncs.com/tokengo/mem0  # 使用本地构建
    build:
      context: ./server
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          memory: 32G  # 增加mem0内存以支持超大仓库的向量检索
        reservations:
          memory: 4G
    networks:
      - koala_network
    volumes:
      - ./history:/app/history      # History db location. By default, it creates a history.db file on the server folder
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload  # Enable auto-reload
    environment:
      - TZ=America/Los_Angeles
      - PYTHONDONTWRITEBYTECODE=1  # Prevents Python from writing .pyc files
      - PYTHONUNBUFFERED=1  # Ensures Python output is sent straight to terminal
      - API_KEY=koala-ai
      # 通过 litellm 统一访问所有模型（litellm 需要配置 drop_params=true）
      - OPENAI_API_KEY=sk-a6IwJQ3_dJCANSipFXBcnw
      - OPENAI_BASE_URL=http://us-agent.supermicro.com:4500/v1
      - OPENAI_CHAT_MODEL=grok-4-fast-non-reasoning
      - OPENAI_EMBEDDING_MODEL=nvidia_embed
      - EMBEDDING_MODEL_DIMS=4096
      # Graph Store 配置（完整功能启用！）
      - GRAPH_STORE_ENABLED=true
      # 数据库配置
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=mem0graph
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_COLLECTION_NAME=mem0Net # Mem0使用的Postgres集合名称
  
  postgres:
    image: ankane/pgvector:v0.5.1
    restart: on-failure
    shm_size: "2gb" # 增加共享内存以支持超大仓库
    deploy:
      resources:
        limits:
          memory: 32G  # 大幅增加内存以加速向量检索和查询
        reservations:
          memory: 8G
    networks:
      - koala_network
    environment:
      - TZ=America/Los_Angeles
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=KoalaWiki
      - POSTGRES_MAX_CONNECTIONS=300  # 增加最大连接数以支持更多并发
      - POSTGRES_SHARED_BUFFERS=4GB  # 大幅增加共享缓冲区
    command: >
      postgres
      -c max_connections=300
      -c shared_buffers=4GB
      -c effective_cache_size=16GB
      -c maintenance_work_mem=1GB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=64MB
      -c default_statistics_target=500
      -c random_page_cost=1.1
      -c effective_io_concurrency=300
      -c work_mem=64MB
      -c huge_pages=off
      -c min_wal_size=4GB
      -c max_wal_size=16GB
      -c max_worker_processes=16
      -c max_parallel_workers_per_gather=8
      -c max_parallel_workers=16
      -c statement_timeout=600000
      -c idle_in_transaction_session_timeout=600000
      -c tcp_keepalives_idle=60
      -c tcp_keepalives_interval=10
      -c tcp_keepalives_count=6
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 30s
    volumes:
      - ./postgres_db:/var/lib/postgresql/data

  neo4j:
    image: neo4j:5.26.4
    container_name: neo4j
    deploy:
      resources:
        limits:
          memory: 24G  # 大幅增加内存以支持超大仓库的复杂知识图谱
        reservations:
          memory: 8G
    networks:
      - koala_network
    healthcheck:
      test: wget http://localhost:7687 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    volumes:
      - ./neo4j_data:/data
    environment:
      - TZ=America/Los_Angeles
      - NEO4J_AUTH=neo4j/mem0graph
      - NEO4J_db_temporal_timezone=America/Los_Angeles
      - NEO4J_PLUGINS=["apoc"]  # Add this line to install APOC
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_server_memory_heap_initial__size=4G
      - NEO4J_server_memory_heap_max__size=12G
      - NEO4J_server_memory_pagecache_size=8G
  
  aspire-dashboard:
    image: mcr.microsoft.com/dotnet/aspire-dashboard
    container_name: aspire-dashboard
    restart: always
    ports:
      - "18888:18888"
    environment:
      - TZ=America/Los_Angeles
      - Dashboard:ApplicationName=Aspire
networks:
  koala_network:
    driver: bridge